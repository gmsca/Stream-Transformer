{
    "ksql": "CREATE STREAM CLAIMSTATUS_STREAM ( CS_ClaimStatusID INT, CS_Description VARCHAR ) WITH ( KAFKA_TOPIC = 'CIMS.Financial.ClaimStatus', VALUE_FORMAT = 'AVRO' ); CREATE STREAM CLAIMSTATUS_KEYED WITH (KAFKA_TOPIC = 'CLAIMSTATUS_KEYED') AS SELECT CS_ClaimStatusID as key, CS_Description as Description, AS_VALUE(CS_ClaimStatusID) as StatusID FROM CLAIMSTATUS_STREAM PARTITION BY CS_ClaimStatusID EMIT CHANGES; CREATE TABLE CLAIMSTATUS ( key INT PRIMARY KEY, StatusID INT, Description VARCHAR ) WITH ( KAFKA_TOPIC = 'CLAIMSTATUS_KEYED', VALUE_FORMAT = 'AVRO' ); CREATE STREAM CLAIMSTATUSCLAIMLINK_STREAM ( CL_ClaimID INT, CS_ClaimStatusID INT ) WITH ( KAFKA_TOPIC = 'CIMS.Financial.ClaimStatusClaimLink', VALUE_FORMAT = 'AVRO' ); CREATE STREAM CLAIMSTATUSCLAIMLINK_KEYED WITH(KAFKA_TOPIC = 'CLAIMSTATUSCLAIMLINK_KEYED') AS SELECT CL_ClaimID as ClaimID, CS_ClaimStatusID as key, AS_VALUE(CS_ClaimStatusID) as StatusID FROM CLAIMSTATUSCLAIMLINK_STREAM PARTITION BY CS_ClaimStatusID EMIT CHANGES; CREATE TABLE CLAIMSTATUSCLAIMLINK ( key INT PRIMARY KEY, ClaimID INT, StatusID INT ) WITH ( KAFKA_TOPIC = 'CLAIMSTATUSCLAIMLINK_KEYED', VALUE_FORMAT = 'AVRO' ); CREATE TABLE ClaimStatus_Joined AS SELECT CLAIMSTATUSCLAIMLINK.key as key, CLAIMSTATUSCLAIMLINK.ClaimID as ClaimID, CLAIMSTATUSCLAIMLINK.StatusID AS StatusID, CLAIMSTATUS.Description as Description FROM CLAIMSTATUSCLAIMLINK JOIN CLAIMSTATUS ON CLAIMSTATUSCLAIMLINK.key = CLAIMSTATUS.key; CREATE STREAM ClaimStatus_Joined_Stream ( CLAIMID INT, STATUSID INT, DESCRIPTION VARCHAR ) WITH ( KAFKA_TOPIC = 'CLAIMSTATUS_JOINED', VALUE_FORMAT = 'AVRO' ); CREATE STREAM ClaimStatus_Joined_Keyed WITH(KAFKA_TOPIC = 'ClaimStatus_Joined_Keyed') AS SELECT CLAIMID as key, AS_VALUE(CLAIMID) as CLAIMID, STATUSID, DESCRIPTION FROM ClaimStatus_Joined_Stream PARTITION BY CLAIMID EMIT CHANGES; CREATE TABLE ClaimStatus_ClaimStatusClaimLink ( key INT PRIMARY KEY, ClaimID INT, StatusID INT, DESCRIPTION VARCHAR ) WITH ( KAFKA_TOPIC = 'ClaimStatus_Joined_Keyed', VALUE_FORMAT = 'AVRO' ); CREATE STREAM CLAIM_STREAM ( CL_ClaimID INT, CL_FEESUBMITTED DOUBLE, CL_TOTALOWED DOUBLE, CB_CLAIMSTATEID INT, CL_PAID BOOLEAN ) WITH ( KAFKA_TOPIC = 'CIMS.Financial.Claim', VALUE_FORMAT = 'AVRO' ); CREATE STREAM CLAIM_KEYED WITH(KAFKA_TOPIC = 'CLAIM_KEYED') AS SELECT CL_ClaimID as key, AS_VALUE(CL_ClaimID) as ClaimID, CL_FEESUBMITTED as FeeSubmitted, CL_TOTALOWED as TotalOwed, CB_CLAIMSTATEID as StateID, CL_PAID as Paid FROM CLAIM_STREAM PARTITION BY CL_ClaimID EMIT CHANGES; CREATE TABLE CLAIM ( key INT PRIMARY KEY, ClaimID INT, FeeSubmitted DOUBLE, TotalOwed DOUBLE, StateID INT, Paid BOOLEAN ) WITH ( KAFKA_TOPIC = 'CLAIM_KEYED', VALUE_FORMAT = 'AVRO' ); CREATE TABLE Claim_ClaimStatus_Joined AS SELECT CLAIM.key as key, CLAIM.ClaimID as ClaimID, StatusID, Description, FeeSubmitted, TotalOwed, StateID, Paid FROM CLAIM LEFT JOIN ClaimStatus_ClaimStatusClaimLink ON CLAIMSTATUS_CLAIMSTATUSCLAIMLINK.key = CLAIM.key; CREATE STREAM Claim_ClaimStatus_Stream ( STATEID INT, ClaimID INT, StatusID INT, Description VARCHAR, FeeSubmitted DOUBLE, TotalOwed DOUBLE, Paid BOOLEAN ) WITH ( KAFKA_TOPIC = 'CLAIM_CLAIMSTATUS_JOINED', VALUE_FORMAT = 'AVRO' ); CREATE STREAM CLAIMSTATE_STREAM ( CB_ClaimStateID INT, CB_Description VARCHAR ) WITH ( KAFKA_TOPIC = 'CIMS.Reference.ClaimState', VALUE_FORMAT = 'AVRO' ); CREATE STREAM CLAIMSTATE_KEYED WITH(KAFKA_TOPIC = 'CLAIMSTATE_KEYED') AS SELECT CB_ClaimStateID as key, AS_VALUE(CB_ClaimStateID) as StateID, CB_Description as State FROM CLAIMSTATE_STREAM PARTITION BY CB_ClaimStateID EMIT CHANGES; CREATE TABLE CLAIMSTATE ( key INT PRIMARY KEY, StateID INT, State VARCHAR ) WITH ( KAFKA_TOPIC = 'CLAIMSTATE_KEYED', VALUE_FORMAT = 'AVRO' ); CREATE STREAM Claim_ClaimStatus_ClaimState_Joined AS SELECT Claim_ClaimStatus_Stream.STATEID as key, ClaimID, Description, FeeSubmitted, TotalOwed, CLAIMSTATE.STATE as State, Paid FROM Claim_ClaimStatus_Stream LEFT JOIN CLAIMSTATE ON CLAIMSTATE.key = Claim_ClaimStatus_Stream.STATEID;",
    "streamsProperties": {
        "ksql.streams.auto.offset.reset": "earliest"
    }
}