/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ClaimCostPlus extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5460488007619291099L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClaimCostPlus\",\"fields\":[{\"name\":\"CCP_ID\",\"type\":\"int\"},{\"name\":\"CL_ClaimID\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"CCP_AdminFee\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"CCP_PremTax\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"CCP_PremAdmin\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"CCP_RST\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"CCP_GST\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"CCP_HST\",\"type\":[\"null\",\"double\"],\"default\":null}],\"connect.name\":\"CIMSTEST.Financial.ClaimCostPlus.Value\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClaimCostPlus> ENCODER =
      new BinaryMessageEncoder<ClaimCostPlus>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClaimCostPlus> DECODER =
      new BinaryMessageDecoder<ClaimCostPlus>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ClaimCostPlus> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ClaimCostPlus> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClaimCostPlus>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ClaimCostPlus to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ClaimCostPlus from a ByteBuffer. */
  public static ClaimCostPlus fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int CCP_ID;
  @Deprecated public java.lang.Integer CL_ClaimID;
  @Deprecated public java.lang.Double CCP_AdminFee;
  @Deprecated public java.lang.Double CCP_PremTax;
  @Deprecated public java.lang.Double CCP_PremAdmin;
  @Deprecated public java.lang.Double CCP_RST;
  @Deprecated public java.lang.Double CCP_GST;
  @Deprecated public java.lang.Double CCP_HST;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClaimCostPlus() {}

  /**
   * All-args constructor.
   * @param CCP_ID The new value for CCP_ID
   * @param CL_ClaimID The new value for CL_ClaimID
   * @param CCP_AdminFee The new value for CCP_AdminFee
   * @param CCP_PremTax The new value for CCP_PremTax
   * @param CCP_PremAdmin The new value for CCP_PremAdmin
   * @param CCP_RST The new value for CCP_RST
   * @param CCP_GST The new value for CCP_GST
   * @param CCP_HST The new value for CCP_HST
   */
  public ClaimCostPlus(java.lang.Integer CCP_ID, java.lang.Integer CL_ClaimID, java.lang.Double CCP_AdminFee, java.lang.Double CCP_PremTax, java.lang.Double CCP_PremAdmin, java.lang.Double CCP_RST, java.lang.Double CCP_GST, java.lang.Double CCP_HST) {
    this.CCP_ID = CCP_ID;
    this.CL_ClaimID = CL_ClaimID;
    this.CCP_AdminFee = CCP_AdminFee;
    this.CCP_PremTax = CCP_PremTax;
    this.CCP_PremAdmin = CCP_PremAdmin;
    this.CCP_RST = CCP_RST;
    this.CCP_GST = CCP_GST;
    this.CCP_HST = CCP_HST;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CCP_ID;
    case 1: return CL_ClaimID;
    case 2: return CCP_AdminFee;
    case 3: return CCP_PremTax;
    case 4: return CCP_PremAdmin;
    case 5: return CCP_RST;
    case 6: return CCP_GST;
    case 7: return CCP_HST;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CCP_ID = (java.lang.Integer)value$; break;
    case 1: CL_ClaimID = (java.lang.Integer)value$; break;
    case 2: CCP_AdminFee = (java.lang.Double)value$; break;
    case 3: CCP_PremTax = (java.lang.Double)value$; break;
    case 4: CCP_PremAdmin = (java.lang.Double)value$; break;
    case 5: CCP_RST = (java.lang.Double)value$; break;
    case 6: CCP_GST = (java.lang.Double)value$; break;
    case 7: CCP_HST = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CCP_ID' field.
   * @return The value of the 'CCP_ID' field.
   */
  public java.lang.Integer getCCPID() {
    return CCP_ID;
  }

  /**
   * Sets the value of the 'CCP_ID' field.
   * @param value the value to set.
   */
  public void setCCPID(java.lang.Integer value) {
    this.CCP_ID = value;
  }

  /**
   * Gets the value of the 'CL_ClaimID' field.
   * @return The value of the 'CL_ClaimID' field.
   */
  public java.lang.Integer getCLClaimID() {
    return CL_ClaimID;
  }

  /**
   * Sets the value of the 'CL_ClaimID' field.
   * @param value the value to set.
   */
  public void setCLClaimID(java.lang.Integer value) {
    this.CL_ClaimID = value;
  }

  /**
   * Gets the value of the 'CCP_AdminFee' field.
   * @return The value of the 'CCP_AdminFee' field.
   */
  public java.lang.Double getCCPAdminFee() {
    return CCP_AdminFee;
  }

  /**
   * Sets the value of the 'CCP_AdminFee' field.
   * @param value the value to set.
   */
  public void setCCPAdminFee(java.lang.Double value) {
    this.CCP_AdminFee = value;
  }

  /**
   * Gets the value of the 'CCP_PremTax' field.
   * @return The value of the 'CCP_PremTax' field.
   */
  public java.lang.Double getCCPPremTax() {
    return CCP_PremTax;
  }

  /**
   * Sets the value of the 'CCP_PremTax' field.
   * @param value the value to set.
   */
  public void setCCPPremTax(java.lang.Double value) {
    this.CCP_PremTax = value;
  }

  /**
   * Gets the value of the 'CCP_PremAdmin' field.
   * @return The value of the 'CCP_PremAdmin' field.
   */
  public java.lang.Double getCCPPremAdmin() {
    return CCP_PremAdmin;
  }

  /**
   * Sets the value of the 'CCP_PremAdmin' field.
   * @param value the value to set.
   */
  public void setCCPPremAdmin(java.lang.Double value) {
    this.CCP_PremAdmin = value;
  }

  /**
   * Gets the value of the 'CCP_RST' field.
   * @return The value of the 'CCP_RST' field.
   */
  public java.lang.Double getCCPRST() {
    return CCP_RST;
  }

  /**
   * Sets the value of the 'CCP_RST' field.
   * @param value the value to set.
   */
  public void setCCPRST(java.lang.Double value) {
    this.CCP_RST = value;
  }

  /**
   * Gets the value of the 'CCP_GST' field.
   * @return The value of the 'CCP_GST' field.
   */
  public java.lang.Double getCCPGST() {
    return CCP_GST;
  }

  /**
   * Sets the value of the 'CCP_GST' field.
   * @param value the value to set.
   */
  public void setCCPGST(java.lang.Double value) {
    this.CCP_GST = value;
  }

  /**
   * Gets the value of the 'CCP_HST' field.
   * @return The value of the 'CCP_HST' field.
   */
  public java.lang.Double getCCPHST() {
    return CCP_HST;
  }

  /**
   * Sets the value of the 'CCP_HST' field.
   * @param value the value to set.
   */
  public void setCCPHST(java.lang.Double value) {
    this.CCP_HST = value;
  }

  /**
   * Creates a new ClaimCostPlus RecordBuilder.
   * @return A new ClaimCostPlus RecordBuilder
   */
  public static ClaimCostPlus.Builder newBuilder() {
    return new ClaimCostPlus.Builder();
  }

  /**
   * Creates a new ClaimCostPlus RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClaimCostPlus RecordBuilder
   */
  public static ClaimCostPlus.Builder newBuilder(ClaimCostPlus.Builder other) {
    return new ClaimCostPlus.Builder(other);
  }

  /**
   * Creates a new ClaimCostPlus RecordBuilder by copying an existing ClaimCostPlus instance.
   * @param other The existing instance to copy.
   * @return A new ClaimCostPlus RecordBuilder
   */
  public static ClaimCostPlus.Builder newBuilder(ClaimCostPlus other) {
    return new ClaimCostPlus.Builder(other);
  }

  /**
   * RecordBuilder for ClaimCostPlus instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClaimCostPlus>
    implements org.apache.avro.data.RecordBuilder<ClaimCostPlus> {

    private int CCP_ID;
    private java.lang.Integer CL_ClaimID;
    private java.lang.Double CCP_AdminFee;
    private java.lang.Double CCP_PremTax;
    private java.lang.Double CCP_PremAdmin;
    private java.lang.Double CCP_RST;
    private java.lang.Double CCP_GST;
    private java.lang.Double CCP_HST;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ClaimCostPlus.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CCP_ID)) {
        this.CCP_ID = data().deepCopy(fields()[0].schema(), other.CCP_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CL_ClaimID)) {
        this.CL_ClaimID = data().deepCopy(fields()[1].schema(), other.CL_ClaimID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CCP_AdminFee)) {
        this.CCP_AdminFee = data().deepCopy(fields()[2].schema(), other.CCP_AdminFee);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CCP_PremTax)) {
        this.CCP_PremTax = data().deepCopy(fields()[3].schema(), other.CCP_PremTax);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CCP_PremAdmin)) {
        this.CCP_PremAdmin = data().deepCopy(fields()[4].schema(), other.CCP_PremAdmin);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CCP_RST)) {
        this.CCP_RST = data().deepCopy(fields()[5].schema(), other.CCP_RST);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CCP_GST)) {
        this.CCP_GST = data().deepCopy(fields()[6].schema(), other.CCP_GST);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.CCP_HST)) {
        this.CCP_HST = data().deepCopy(fields()[7].schema(), other.CCP_HST);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ClaimCostPlus instance
     * @param other The existing instance to copy.
     */
    private Builder(ClaimCostPlus other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CCP_ID)) {
        this.CCP_ID = data().deepCopy(fields()[0].schema(), other.CCP_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CL_ClaimID)) {
        this.CL_ClaimID = data().deepCopy(fields()[1].schema(), other.CL_ClaimID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CCP_AdminFee)) {
        this.CCP_AdminFee = data().deepCopy(fields()[2].schema(), other.CCP_AdminFee);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CCP_PremTax)) {
        this.CCP_PremTax = data().deepCopy(fields()[3].schema(), other.CCP_PremTax);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CCP_PremAdmin)) {
        this.CCP_PremAdmin = data().deepCopy(fields()[4].schema(), other.CCP_PremAdmin);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CCP_RST)) {
        this.CCP_RST = data().deepCopy(fields()[5].schema(), other.CCP_RST);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CCP_GST)) {
        this.CCP_GST = data().deepCopy(fields()[6].schema(), other.CCP_GST);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.CCP_HST)) {
        this.CCP_HST = data().deepCopy(fields()[7].schema(), other.CCP_HST);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'CCP_ID' field.
      * @return The value.
      */
    public java.lang.Integer getCCPID() {
      return CCP_ID;
    }

    /**
      * Sets the value of the 'CCP_ID' field.
      * @param value The value of 'CCP_ID'.
      * @return This builder.
      */
    public ClaimCostPlus.Builder setCCPID(int value) {
      validate(fields()[0], value);
      this.CCP_ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CCP_ID' field has been set.
      * @return True if the 'CCP_ID' field has been set, false otherwise.
      */
    public boolean hasCCPID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CCP_ID' field.
      * @return This builder.
      */
    public ClaimCostPlus.Builder clearCCPID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CL_ClaimID' field.
      * @return The value.
      */
    public java.lang.Integer getCLClaimID() {
      return CL_ClaimID;
    }

    /**
      * Sets the value of the 'CL_ClaimID' field.
      * @param value The value of 'CL_ClaimID'.
      * @return This builder.
      */
    public ClaimCostPlus.Builder setCLClaimID(java.lang.Integer value) {
      validate(fields()[1], value);
      this.CL_ClaimID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CL_ClaimID' field has been set.
      * @return True if the 'CL_ClaimID' field has been set, false otherwise.
      */
    public boolean hasCLClaimID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CL_ClaimID' field.
      * @return This builder.
      */
    public ClaimCostPlus.Builder clearCLClaimID() {
      CL_ClaimID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'CCP_AdminFee' field.
      * @return The value.
      */
    public java.lang.Double getCCPAdminFee() {
      return CCP_AdminFee;
    }

    /**
      * Sets the value of the 'CCP_AdminFee' field.
      * @param value The value of 'CCP_AdminFee'.
      * @return This builder.
      */
    public ClaimCostPlus.Builder setCCPAdminFee(java.lang.Double value) {
      validate(fields()[2], value);
      this.CCP_AdminFee = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'CCP_AdminFee' field has been set.
      * @return True if the 'CCP_AdminFee' field has been set, false otherwise.
      */
    public boolean hasCCPAdminFee() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'CCP_AdminFee' field.
      * @return This builder.
      */
    public ClaimCostPlus.Builder clearCCPAdminFee() {
      CCP_AdminFee = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'CCP_PremTax' field.
      * @return The value.
      */
    public java.lang.Double getCCPPremTax() {
      return CCP_PremTax;
    }

    /**
      * Sets the value of the 'CCP_PremTax' field.
      * @param value The value of 'CCP_PremTax'.
      * @return This builder.
      */
    public ClaimCostPlus.Builder setCCPPremTax(java.lang.Double value) {
      validate(fields()[3], value);
      this.CCP_PremTax = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'CCP_PremTax' field has been set.
      * @return True if the 'CCP_PremTax' field has been set, false otherwise.
      */
    public boolean hasCCPPremTax() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'CCP_PremTax' field.
      * @return This builder.
      */
    public ClaimCostPlus.Builder clearCCPPremTax() {
      CCP_PremTax = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'CCP_PremAdmin' field.
      * @return The value.
      */
    public java.lang.Double getCCPPremAdmin() {
      return CCP_PremAdmin;
    }

    /**
      * Sets the value of the 'CCP_PremAdmin' field.
      * @param value The value of 'CCP_PremAdmin'.
      * @return This builder.
      */
    public ClaimCostPlus.Builder setCCPPremAdmin(java.lang.Double value) {
      validate(fields()[4], value);
      this.CCP_PremAdmin = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'CCP_PremAdmin' field has been set.
      * @return True if the 'CCP_PremAdmin' field has been set, false otherwise.
      */
    public boolean hasCCPPremAdmin() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'CCP_PremAdmin' field.
      * @return This builder.
      */
    public ClaimCostPlus.Builder clearCCPPremAdmin() {
      CCP_PremAdmin = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'CCP_RST' field.
      * @return The value.
      */
    public java.lang.Double getCCPRST() {
      return CCP_RST;
    }

    /**
      * Sets the value of the 'CCP_RST' field.
      * @param value The value of 'CCP_RST'.
      * @return This builder.
      */
    public ClaimCostPlus.Builder setCCPRST(java.lang.Double value) {
      validate(fields()[5], value);
      this.CCP_RST = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'CCP_RST' field has been set.
      * @return True if the 'CCP_RST' field has been set, false otherwise.
      */
    public boolean hasCCPRST() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'CCP_RST' field.
      * @return This builder.
      */
    public ClaimCostPlus.Builder clearCCPRST() {
      CCP_RST = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'CCP_GST' field.
      * @return The value.
      */
    public java.lang.Double getCCPGST() {
      return CCP_GST;
    }

    /**
      * Sets the value of the 'CCP_GST' field.
      * @param value The value of 'CCP_GST'.
      * @return This builder.
      */
    public ClaimCostPlus.Builder setCCPGST(java.lang.Double value) {
      validate(fields()[6], value);
      this.CCP_GST = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'CCP_GST' field has been set.
      * @return True if the 'CCP_GST' field has been set, false otherwise.
      */
    public boolean hasCCPGST() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'CCP_GST' field.
      * @return This builder.
      */
    public ClaimCostPlus.Builder clearCCPGST() {
      CCP_GST = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'CCP_HST' field.
      * @return The value.
      */
    public java.lang.Double getCCPHST() {
      return CCP_HST;
    }

    /**
      * Sets the value of the 'CCP_HST' field.
      * @param value The value of 'CCP_HST'.
      * @return This builder.
      */
    public ClaimCostPlus.Builder setCCPHST(java.lang.Double value) {
      validate(fields()[7], value);
      this.CCP_HST = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'CCP_HST' field has been set.
      * @return True if the 'CCP_HST' field has been set, false otherwise.
      */
    public boolean hasCCPHST() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'CCP_HST' field.
      * @return This builder.
      */
    public ClaimCostPlus.Builder clearCCPHST() {
      CCP_HST = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClaimCostPlus build() {
      try {
        ClaimCostPlus record = new ClaimCostPlus();
        record.CCP_ID = fieldSetFlags()[0] ? this.CCP_ID : (java.lang.Integer) defaultValue(fields()[0]);
        record.CL_ClaimID = fieldSetFlags()[1] ? this.CL_ClaimID : (java.lang.Integer) defaultValue(fields()[1]);
        record.CCP_AdminFee = fieldSetFlags()[2] ? this.CCP_AdminFee : (java.lang.Double) defaultValue(fields()[2]);
        record.CCP_PremTax = fieldSetFlags()[3] ? this.CCP_PremTax : (java.lang.Double) defaultValue(fields()[3]);
        record.CCP_PremAdmin = fieldSetFlags()[4] ? this.CCP_PremAdmin : (java.lang.Double) defaultValue(fields()[4]);
        record.CCP_RST = fieldSetFlags()[5] ? this.CCP_RST : (java.lang.Double) defaultValue(fields()[5]);
        record.CCP_GST = fieldSetFlags()[6] ? this.CCP_GST : (java.lang.Double) defaultValue(fields()[6]);
        record.CCP_HST = fieldSetFlags()[7] ? this.CCP_HST : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClaimCostPlus>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClaimCostPlus>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClaimCostPlus>
    READER$ = (org.apache.avro.io.DatumReader<ClaimCostPlus>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
